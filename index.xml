<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Orhan Balci</title>
    <link>http://orhanbalci.github.io/index.xml</link>
    <description>Recent content on Orhan Balci</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-TR</language>
    <lastBuildDate>Wed, 27 Jan 2016 15:29:31 +0800</lastBuildDate>
    <atom:link href="http://orhanbalci.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rust Program Düzeni : Modüller</title>
      <link>http://orhanbalci.github.io/post/rust-program-duzeni-moduller/</link>
      <pubDate>Wed, 27 Jan 2016 15:29:31 +0800</pubDate>
      
      <guid>http://orhanbalci.github.io/post/rust-program-duzeni-moduller/</guid>
      <description>&lt;p&gt;Gelistiridigimiz projeler buyudukce bu karmasikligi yonetmek icin dillerin bize sagladigi soyutlama ve paketleme mekanizmalarini kullaniyoruz. Javada package, C++ da namespace kavramlari birbiriyle ilintili olan kod kumelerini gruplamaya yarayan yapilar. Rust dilinde ayni gorev icin moduller kullaniliyor. Modül tanimlamak icin &lt;code&gt;mod&lt;/code&gt; anahtar kelimesi kullaniliyor. Yeri gelmisken deginmeden edemeyecegim Rust anahtar kelime konusunda diger dillere gore basitlik acisindan onde. Sık kullanılan anahtar kelımeler oldukca kısa tutulmus. Ornegin fonksiyon icin &lt;code&gt;fn&lt;/code&gt;, modul icin &lt;code&gt;mod&lt;/code&gt;, public icin &lt;code&gt;pub&lt;/code&gt;. Ilk olarak modul tanimlamayi ogrenelim. Ornegin bir oyun yazdigimizi dusunelim. Matematik hesaplamalarda kullanacagimiz yapilari &lt;code&gt;math&lt;/code&gt; modulune, ai algoritmalarimizi da &lt;code&gt;ai&lt;/code&gt; modulune koyalim. Tabi bu modullere ait alt moduller de tanimlayalim :
&lt;script src=&#34;//gist.github.com/orhanbalci/31e6ea4482fd949d1b87.js&#34;&gt;&lt;/script&gt;
Bu modulleri game_sample projemizde main.rs dosyasinda tanimliyoruz. Projemizin klasor yapisi kabaca su sekilde oluyor.
&lt;script src=&#34;//gist.github.com/orhanbalci/0346d867ea24ccb818ae.js&#34;&gt;&lt;/script&gt;
Aklimiza gelen ilk soru tum modulleri ayni dosya icerisine mi yazacagiz oluyor. Bu sorunu cozmek icin modul ismi ile ayni isimde bir .rs dosyasi olusturuyoruz ve modul icerigini bu dosyaya tasiyoruz. Bu ilk cozum. Math ve a.i modullerini kendi dosyalarina tasiyalim. Modul isimlendirirken snake_case isimlendirme yontemini kullaniyoruz. Tamamen kucuk harfleri kullanip kelimeler arasina _ koyuyoruz. main.rs dosyamizi duzenliyoruz. modul iceriklerini tasidigimiz icin burada sadece &lt;code&gt;mod math; mod ai;&lt;/code&gt; satirlari kaliyor. Duzenlemeden sonra main.rs math.rs ai.rs dosyalarimiz :
&lt;script src=&#34;//gist.github.com/orhanbalci/26d320a4bf02a8e9c2ee.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/orhanbalci/b5cf159fbcb893d5606a.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;//gist.github.com/orhanbalci/d44117104421c67f41ae.js&#34;&gt;&lt;/script&gt;
Dikkat etmemiz gereken husus hem main.rs icinde hem modul_adi.rs dosyasi icinde ayni modul tanimini tekrarlamamak. Bu adimi yaptiktan sonra klasorumuzun son hali su sekilde oluyor :
&lt;script src=&#34;//gist.github.com/orhanbalci/1df24b7e443d67f26e53.js&#34;&gt;&lt;/script&gt;
Aslinda bir nebze de olsa karmasikliktan kurtulduk. Peki math ve ai modullerinin alt modullerini nasil dosyalamaliyiz. Onlari da ayni sekilde kendi dosyalarina alabilirmiyiz ? ai.rs dosyasinin icerigini su sekilde guncelleyelim ve bos bir agent.rs dosyasini olusturalim.  Son durumda dosyalarimiz su sekilde oluyor :
&lt;script src=&#34;//gist.github.com/orhanbalci/1df24b7e443d67f26e53.js&#34;&gt;&lt;/script&gt;
&lt;code&gt;cargo build&lt;/code&gt; komutu ile projemizi derlemeye calisinca su sekilde bir hata aliyoruz.
&lt;script src=&#34;//gist.github.com/orhanbalci/67da4ff939c672a6e5a6.js&#34;&gt;&lt;/script&gt;
Hata mesaji aslinda ne yapmamiz gerektigini bize gosteriyor. Dallanmis modullerin bulundugu durumda hepsini ayni klasor icinde kendi dosyalarina alamiyoruz. Bu durumda Rust un ikinci modul tanimlama konfigurasyonunu kullanmamiz gerekiyor. Modul ismiyle ayni bir alt klasor olusturup icine &lt;code&gt;mod.rs&lt;/code&gt; isminde kaynak dosyasi olusturuyoruz. ai klasoru olusturup icine mod.rs dosyasini olusturalim ve icerigini ai.rs dosyasindan kopyalayalim. Son durumda klasorumuzun yapisi su sekilde olusuyor.
&lt;script src=&#34;//gist.github.com/orhanbalci/d43ade45af3e1c50fd7d.js&#34;&gt;&lt;/script&gt;
Modul yapisini klasor yapisiyla eslestirmis oluyoruz.  Rust ile gelistirilmis projeleri incelerken her alt klasorun altinda mod.rs dosyalari goreceksiniz. Bunlarin tamami modul tanim dosyalaridir.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust Cheatsheet</title>
      <link>http://orhanbalci.github.io/post/rust-cheatsheet/</link>
      <pubDate>Fri, 18 Dec 2015 15:29:31 +0800</pubDate>
      
      <guid>http://orhanbalci.github.io/post/rust-cheatsheet/</guid>
      <description>

&lt;h1 id=&#34;rust-cheatsheet&#34;&gt;Rust Cheatsheet&lt;/h1&gt;

&lt;p&gt;Rust ile ilgili hatirlamak amacli notlardir :&lt;/p&gt;

&lt;h1 id=&#34;cargo-komutlari&#34;&gt;Cargo Komutlari&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Yeni proje olusturmak icin &lt;code&gt;cargo new proje_adi --bin&lt;/code&gt; komutunu kullaniyoruz&lt;/li&gt;
&lt;li&gt;carate aramak icin &lt;code&gt;cargo search crate_adi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;test build run icin &lt;code&gt;cargo test&lt;/code&gt; &lt;code&gt;cargo build&lt;/code&gt;&lt;code&gt;cargo run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cargo alt komutlarini listelemek icin &lt;code&gt;cargo --list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;string&#34;&gt;String&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&amp;str; -&amp;gt; String donusumu String::from(&amp;str;) seklinde yapiliyor&lt;/li&gt;
&lt;li&gt;substring almak icin String yapisinin [begin_index..end_index] operatoru kullanilabilir&lt;/li&gt;
&lt;li&gt;Herhangi bir tipi String e cevirmek icin o tipin to_string() fonksiyonunu kullanabilirsiniz &lt;code&gt;num.to_string()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Herhangi bir Stringi diger tiplere cevirmek icin&lt;code&gt;parse::().unwrap()&lt;/code&gt; fonksiyonunu kullaniyoruz&lt;/li&gt;
&lt;li&gt;Stringi u8 vectore cevirmek icin &lt;code&gt;into_bytes&lt;/code&gt; fonksiyonunu kullaniyoruz&lt;/li&gt;
&lt;li&gt;byte arraydan Stringe donusum &lt;code&gt;String::from_utf8_lossy&lt;/code&gt; fonksiyonu ile gerceklesiyor. Stringinizde unicode karakterler varsa istenmeyen sonuclar alabilirsiniz&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;collections&#34;&gt;Collections&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;HashMap kullanimi icin use std::collections::HashMap&lt;/li&gt;
&lt;li&gt;HashMap eklemek icin insert(key,value) apisi kullaniliyor&lt;/li&gt;
&lt;li&gt;HashMap de varmi kontrolu contains_key(key) apisi ile oluyor&lt;/li&gt;
&lt;li&gt;HashMap de value get(key) ile alinabiliyor Option donuyor unwrap yapmak gerekiyor&lt;/li&gt;
&lt;li&gt;Vec son elemani &lt;code&gt;last()&lt;/code&gt; ile aliyoruz. eger son eleman uzerinde degisiklik yapmak istersek &lt;code&gt;last_mut()&lt;/code&gt; kullanmaliyiz&lt;/li&gt;
&lt;li&gt;Vec iterasyonlarinda &lt;code&gt;i in vec.iter()&lt;/code&gt; yerine okunaklilik acisindan &lt;code&gt;i in &amp;amp;vec;&lt;/code&gt; kullaniyoruz&lt;/li&gt;
&lt;li&gt;Elimizde Vec varsa bunu tek bir stringde birlestirmek icin concat() ve join() fonksiyonlarini kullaniyoruz&lt;/li&gt;
&lt;li&gt;Vec nesnesinden 2 serli 3 erli gruplar elde etmek icin &lt;code&gt;chunks&lt;/code&gt; fonksiyonunu kullaniyoruz. String icin bu yok maalesef.&lt;/li&gt;
&lt;li&gt;slice parametreleri ffi interfaceden gecmek icin as_ptr kullaniyoruz&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;iterator&#34;&gt;Iterator&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Azalan bir iterator elde etmek icin &lt;code&gt;(a..b).rev()&lt;/code&gt; kullaniyoruz&lt;/li&gt;
&lt;li&gt;Iterasyonda ilk n elemani atlamak icin &lt;code&gt;iter().skip(n)&lt;/code&gt;kullaniyoruz&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;test&#34;&gt;Test&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Floating point sayilar icin esitlik makrosu bulunmuyor. approx cratesi kulanilabilir&lt;/li&gt;
&lt;li&gt;#[macro use] extern crate approx; partial_eq!()&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rust Dökümantasyon</title>
      <link>http://orhanbalci.github.io/post/rust-dokumantasyon/</link>
      <pubDate>Wed, 09 Dec 2015 15:29:31 +0800</pubDate>
      
      <guid>http://orhanbalci.github.io/post/rust-dokumantasyon/</guid>
      <description>

&lt;h1 id=&#34;rust-dökümantasyon&#34;&gt;Rust Dökümantasyon&lt;/h1&gt;

&lt;p&gt;Rust kod dokumantasyonuna onem veren bir dil ve bunu default olarak desteklemekte. Yani Rust alet cantasini bilgisayarimiza yukledigimizde &lt;strong&gt;rustdoc&lt;/strong&gt; denilen kod yorumlarindan dokumantasyon olusturan yardimci yazilim da bilgisayarimiza yukleniyor. Bu araci &lt;code&gt;rustdoc kaynak_kod_dosyasi.rs&lt;/code&gt; seklinde kullanabiliriz yada Rust un proje yonetim araci Cargo ile &lt;code&gt;cargo doc&lt;/code&gt; seklinde de kullanabiliriz. Yazilim gelistirirken mutlaka guncel tutulan tek sey yazilim kaynak kodu oldugu icin dokumantasyonu kod yorumlarindan olusturmak tercih edilen bir uygulama. Bunu Java&amp;rsquo;da Javadoc, c++ da doxygen ile uyguluyoruz. Rust bu konuda &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;markdown&lt;/a&gt; denen standardi destekliyor. Yorum bloklari &lt;code&gt;///&lt;/code&gt; uclu slash ile normal yorum bloklarindan ayriliyor. Klasik bir dokumantasyon blogu sunun gibi oluyor :  Dokumantasyon icinde kod blogu gostermek istiyorsak (ozellikle fonksiyonumuzun ormek kullanimi gibi ornek kodlar ise yariyor) &lt;code&gt;kullaniyoruz. Ornegin :  Burada dikkat etmemiz gereken hususlardan bir tanesi `///` isaretlerinden sonra bosluk birakmamiz gerektigi sanirim Markup ile ilgili bir durum.&lt;/code&gt; isaretleri ile varsayilan olarak rust kodu sentaksi renklendiriliyor. Bunun disinda bir dilden kod blogu gosterecekseniz bunu belirtmeniz gerekiyor. Ornegin java kodu eklemek istiyorsaniz ```&lt;code&gt;java&lt;/code&gt; seklinde kullanmaniz gerekiyor. Yukaridaki ornekte aslinda bir diger ozelligi de kullanmis olduk. &lt;code&gt;#&lt;/code&gt; karakteri ile dokumantasyonda ana baslik, bolum olusturabiliyoruz.  Simdiye kadar anlattiklarimiz genellikle diger dokumantasyon araclariyla ortak olan kisimlardi. Rustdocu digerlerinden ayiran en buyuk ozellik testlerinizi dokumantasyon icine yazabiliyorsunuz. Yazdigimiz testler hem dokumantasyonu olusturuyor hem de unit test olarak cagrilabiliyor. Peki bunu nasil yapiyoruz. rustdoc bu konuda elimizi epey rahatlatiyor ornegin kodumuz bir main blogu icinde degilse kendi olusturuyor,bazi sik kullanilan compiler makrolarini koda ekliyor. Test kodunun compile olabilmesini fakat bu kodun tamaminin dokumantasyonda gorunmesini istemiyorsak istenmeyen satirlari &lt;code&gt;#&lt;/code&gt; isaretiyle kapatmamiz yeterli. Ornegin asagida bir fonksiyon ve dokumantasyonu icinde bir test casei yer almakta :  Dokumantasyon icindeki testleri &lt;code&gt;cargo test&lt;/code&gt; komutuyla kolaylikla cagirabiliyoruz. Bu komut tum modulu test edecektir. Sadece tek bir dosya icerisindeki testleri calistirmak istiyorsak &lt;code&gt;rustdoc --test kaynak_dosya.rs&lt;/code&gt; komutunu kullanmamiz yeterli. Dokumantasyon testlerinin en buyuk handikapi sadece kutuphane (library) tipindeki projelerde ise yaramasi. Calistirilabilir dosya urettiginiz projelerde ise yaramiyor. Son olarak &lt;code&gt;///&lt;/code&gt; isaretlemesi kendinden sonra gelen ifadeyi dokumente etmek icin kullniliyor. Bir blogu dokumante etmek icin &lt;code&gt;//!&lt;/code&gt; isaretlemesi kullaniliyor. Bunlara da genellikle module dokumantasyonu deniliyor.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust Closure</title>
      <link>http://orhanbalci.github.io/post/rust-closure/</link>
      <pubDate>Fri, 16 Oct 2015 15:29:31 +0800</pubDate>
      
      <guid>http://orhanbalci.github.io/post/rust-closure/</guid>
      <description>&lt;p&gt;Fonksiyonel programlamanin bas aktorleri birinci sinif fonksiyonlar Rust dilinde de es gecilmemis. Isimli fonksiyonlarin nasil tanimlandigini daha onceki yazilarda gormustuk. Bu makalede isimsiz fonksiyonlardan yani closure lardan bahsedecegim. Closure yapilari fonksiyonel programlamanin bel kemigidir. Fonksiyonlarin diger fonksiyonlara parametre olarak gecilip, donus degeri olarak fonksiyonlari kullanabilmemizi saglarlar. Closurlerin en goze batan ozelligi tanimlandigi ortamdaki degiskenlere erisebilmeleridir ki isimleri de buradan gelir. Rust da closure sentaksi fonksiyonla birebir ayni olup &lt;code&gt;()&lt;/code&gt; yerine &lt;code&gt;||&lt;/code&gt; kullanilir. Ornek bir closure tanimini gorelim :  Yukarida verdigimiz closure ornegi parametresinden baska herhangi bir degiskene erismiyor, bir nevi statik fonksiyon. Yeni bir ornekte closurelarin tanimlandiklari ortamdaki degiskenleri nasil kapsama alanina aldigini (capture) gorelim.  3. satirda tanimladigimiz &lt;code&gt;bigger_than_threshold&lt;/code&gt; closure 2. satirda tanimladigimiz &lt;code&gt;threshold&lt;/code&gt; degiskenine erisebiliyor. 5. satirda ise tanimladigimiz closureu &lt;code&gt;filter&lt;/code&gt; methoduna parametre olarak geciyoruz. Yani bir fonksiyonu digerine parametre olarak gonderiyoruz. Peki her fonksiyonu her fonksiyona parametre olarak gecebilir miyiz? Tabi ki de hayir. Buradaki &lt;code&gt;filter&lt;/code&gt; fonksiyonunun imzasina baktigimizda parametre olarak aldigi fonksiyonun imzasinin da belitildigini goruyoruz. Bu imzada anlamadiginiz yerler olabilir. Generic ler ve genericlerin traitler ile sinirlandirilmasi sozkonusu.  2. satirda predicate parametresinin tipinin hangi tariti implement etmesi gerektigi gosteriliyor. Bu ornekten yola cikarak kendi metodlarimiza closure parametre almayi ve closurelari metodlarimizdan geri donmeyi ogrenelim. Bu sayede fonksiyon ureten fonksiyonlar yazabilir.Genel olarak gelistirdigimiz algoritmalarin ozel kisimlarini disaridan fonksiyon parametresi olarak alabiliriz. Bir ornekle fonksiyonlara parametre olarak fonksiyon gecmeyi ogrenelim. Yazacagimiz fonksiyon iki fonk. parametre alip bunlari 3. parametreye zincirleme olarak uygulayalim.  8. satirda tanimladigimiz &lt;code&gt;closure_pipe&lt;/code&gt; fonksiyonumuz parametre olarak iki tane fonk. aliyor. 9. ve 10. satirlarda bu fonk. parametrelerinin tipini belirtiyoruz. [ad#Yazi Ici Buyuk]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust Trait</title>
      <link>http://orhanbalci.github.io/post/rust-trait/</link>
      <pubDate>Tue, 13 Oct 2015 15:29:31 +0800</pubDate>
      
      <guid>http://orhanbalci.github.io/post/rust-trait/</guid>
      <description>&lt;p&gt;Rust dili bildiğimiz manada kalitimi desteklemiyor. Yani herhangi bir sinifi diğerinden türetip var olan methodlardan faydalanamiyorsunuz. Bu duruma degisik cozumler uretebiliyoruz. Ornegin kalitim yerine composition deseni kullanilabilir. Kalitim desteklenmese de Trait denen yapilar sayesinde interfaceler destekleniyor. Trait lerin diger ismi de type classes. C++ stl kutuphanesinde, Scala gibi dillerde de trait kullanimini gorebiliriz. Trait lerin interfacelerden farki default bir gerceklemelerinin olabilmesi ki bu ozellik son versiyonunda Java&amp;rsquo;ya da eklendi, ve varolan siniflar icin de gerceklenebilir olmasi, Ornegin siz yeni bir trait tanimladiginizda bunu sizin tanimlamadiginiz veri tipleri icin de gercekleyebilirsiniz. Trait anahtar kelimesi kullanilarak tanimlaniyorlar. Implementasyonlari ise impl ve for anahtar kelimeleri ile oluyor. Ornegimizi karsilastirilabilir yapilari temsil etmek uzere bir Comparable trait tanimi ve bunun farkli iki struct icin gerceklemesini gosterek gelistirelim :  1. satirda comparable trait taniminin gorebilirsiniz. Bu trait tek bir method imzasi tanimindan ibaret. Self tipinin kullanimi onemli. 11. ve 27. satirlarda ise comparable taritinin StockField ve ScoreSheet isimli iki struct icin gerceklemesini goruyoruz. Tanimladigimiz structlardan ikiser tane olusturup bunlari karsilastirarak kullnimi da gormus olalim :&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust Akış Kontrol İfadeleri</title>
      <link>http://orhanbalci.github.io/post/rust-akis-kontrol-ifadeleri/</link>
      <pubDate>Mon, 14 Sep 2015 15:29:31 +0800</pubDate>
      
      <guid>http://orhanbalci.github.io/post/rust-akis-kontrol-ifadeleri/</guid>
      <description>&lt;p&gt;Rust dilinde klasik kod akis kontrol ifadeleri bulunmakla beraber çok temel sentaks ve semantik farklar da var. Ilk olarak if/else yapisini inceleyerek farkları gormeye calisalim.  Yukarıda klasik bir if else yapisi ornegi verdim. Sentaks olarak dikkat etmemiz gereken ilk husus 4. satırda conditional ifade yazilirken &lt;code&gt;()&lt;/code&gt; parantezlerin opsiyonel olmasi. Varsayilan olarak kullnilmiyor bu parantezler. kullanildiginda derleyici uyari veriyor. Ikinci sentaks kurali ise if-else bloklarini bildiren &lt;code&gt;{}&lt;/code&gt; parantezlerinin zorunlu olmasi. Icinde tek ifade de yer alsa bunlar zorunlu. Ikinci ornekle asil can alici farki gorelim. If-else bloklari birer expression&amp;rsquo;dir. Yani atama ifadelerinde sag deger olarak kullanilabilirler.  Yukarıdaki örnekte 5. satırda if-else blokunun ciktisini &lt;code&gt;age_class&lt;/code&gt; degiskenine atayabiliyoruz. Burada dikkat edilmesi gereken en önemli şey tum kontrol bloklarinin ayni tip veriyi donmesi gerektigidir. While dongusu c/c++ ile ayni. Do-while dongusu yok. Continue ve break ifadeleri aynen korunmus. Diger dillerden farkli olarak sonsuz dongu blogu icin &lt;code&gt;loop&lt;/code&gt; bloklari mevcut. Bu bloklardan &lt;code&gt;break&lt;/code&gt; ifadesi ile cikabilirsiniz.  For dongusu ise c/c++ dan farkli olarak Iterator&amp;rsquo;lar uzerinden calisiyor. Genel sentaks &lt;code&gt;for degisken in expression{}&lt;/code&gt; seklinde. Burada &lt;code&gt;expression&lt;/code&gt; bir iterator uretmek zorunda. En basit haliyle for dongulerini Range iteratorleri ile kullaniyoruz.  2. satirdaki &lt;code&gt;1..15&lt;/code&gt; ifadesi 1 dahil 15 haric olmak uzere bir Range iterator tanimi yapar. Birer birer degil de farkli bir artisla bir Range tanimlamak istersek :  Herhangi bir collection gezilmek istendiginde eger Iterator traitine sahipse for dongusu kullanilabilir. Ornnegin bir vektorun for loop ile guncellenmesi ornegine bakalim :  [ad#Yazi Ici Buyuk]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rust Primitif Veri Yapilari Tuple ve Array</title>
      <link>http://orhanbalci.github.io/post/rust-primitif-veri-yapilari-tuple-ve-array/</link>
      <pubDate>Fri, 11 Sep 2015 15:29:31 +0800</pubDate>
      
      <guid>http://orhanbalci.github.io/post/rust-primitif-veri-yapilari-tuple-ve-array/</guid>
      <description>

&lt;h1 id=&#34;rust-primitif-veri-yapilari-tuple-ve-array&#34;&gt;Rust Primitif Veri Yapilari Tuple ve Array&lt;/h1&gt;

&lt;p&gt;Tuple yapilari birbirleriyle ilintili verileri bir arada tutmaya yarar. Struct yapilarindan farki alanlarinin isim etiketi olmamasidir. Verilere index yardimiyla erisilir. Imumutable yapilar olup sabit boyutludurlar. Fonksiyonlardan birden fazla deger donmekte, ayni anda birden fazla degiskene deger atamakta, pattern matching islemlerinde kullanicia kolaylik saglarlar. Fonksiyonel programlamaya has veriyapilaridir. Ornegin network baglantilarinda sikca beraber kullandigimiz ip ve port bilgileri icin bir tuple tanimlayalim ve kullanalim :  Temel kullanimi gordukten sonra pattern matching ile ne yapabiliriz buna bakalim. Ufak bir hesaplama fonksiyonu yazalim ve bu fonksiyona parametreleri bir tuple yardimiyla gecelim. Tuple su sekilde olsun &lt;code&gt;(komut,parametre1,parametre2)&lt;/code&gt; bir sonraki ornegimizde ise bir swap fonksiyonu yazarak tuple icindeki degerlerin yer degistirmesini gorelim. Burada &lt;code&gt;destructuring&lt;/code&gt; yani tuple veya struct icerisindeki degerlerin disariya cikarilmasi yontemini de kullanalim. c/c++ ta bu kavram olmadigi icin baslangicta garipseyebilirsiniz :  Ornekte 9. satirdaki ifade ile &lt;code&gt;arg&lt;/code&gt; tuple destructure edilerek elemanlari a,b degiskenlerine atanmistir. Tuplelara bu kadar degindikten sonra bir ornekle de array ve slice kullanimini gorelim. Array boyutlari compile time da bilinmek zorunda. Yani boyutu calisma zamaninda belirlenecek arrayler olusturulamiyor. Slice lar ise arraylarin alt bir araligini temsil eden yapilar. Slicelarin boyutu compile time de bilinmek zorunda degil. Array degisken tipi tanimi &lt;code&gt;[veri tipi;array boyutu]&lt;/code&gt; seklinde yapiliyor. Ilk deger atanirken &lt;code&gt;[deger1,deger2,deger3...degern]&lt;/code&gt; sentaksi yada tum elemanlara ayni degeri atamak icin &lt;code&gt;[atanacak deger; array boyutu]&lt;/code&gt; sentaksi kullanilabilir. Asagidaki ornek rust tutorialindan alinip biraz eklemeler yapilmistir :  15. ve 16. satirlarda bahsettigimiz array degisken tanimlamalari ve deger atamalari yer aliyor. &lt;code&gt;analyze_slice&lt;/code&gt; fonksiyonu slice isimli bir slice parametere aliyor. Bu slice mutable tanimlanmadigi icin fonksiyon icinde slice uzerinde herhangi bir guncelleme aypilamaz. 8. satirda tnimladigimiz &lt;code&gt;update_slice&lt;/code&gt; fonksiyonunda ise mutable bir slice parametresi gectigi icin slice uzerinde guncelleme yapabiliyoruz. 9. satirdaki for ifadesi de slicelari gezinmek icin guzel bir ornek teskil ediyor. [ad#Yazi Ici Buyuk]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://orhanbalci.github.io/drafts/1357/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://orhanbalci.github.io/drafts/1357/</guid>
      <description>

&lt;p&gt;title: Guava Veri Yapıları : MultiSet, MultiMap, BiMap
link: &lt;a href=&#34;http://orhanbalci.net/tr/?p=1357&#34;&gt;http://orhanbalci.net/tr/?p=1357&lt;/a&gt;
author: Orhan Balci
description:
post_id: 1357
created: 2015/03/05 22:20:51
created_gmt:
comment_status: open
post_name:
status: draft
post_type: post&lt;/p&gt;

&lt;h1 id=&#34;guava-veri-yapıları-multiset-multimap-bimap&#34;&gt;Guava Veri Yapıları : MultiSet, MultiMap, BiMap&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://orhanbalci.github.io/drafts/1560/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://orhanbalci.github.io/drafts/1560/</guid>
      <description>

&lt;p&gt;title: Practical Rust Iterator Examples
link: &lt;a href=&#34;http://orhanbalci.net/tr/?p=1560&#34;&gt;http://orhanbalci.net/tr/?p=1560&lt;/a&gt;
author: Orhan Balci
description:
post_id: 1560
created: 2016/05/09 21:40:57
created_gmt:
comment_status: open
post_name:
status: draft
post_type: post&lt;/p&gt;

&lt;h1 id=&#34;practical-rust-iterator-examples&#34;&gt;Practical Rust Iterator Examples&lt;/h1&gt;

&lt;p&gt;Rust programming language has powerful mechanism of iterators to work with collections. Although documentation is fairly good, seeing working examples of iterators helps new learners of the language in grasping the concepts a lot. This post is a collection of rust iterator code snippets and their explanations. let longest_sequence_index = longest_sequence_counter.iter() .enumerate() .max_by_key(|&amp;amp;(index, &amp;elem;)| elem) .unwrap() .0; //If you are transititoning from an imperative language to a functional one, first and most frequent thing to do is conve //One of the challenges in converting imperative loop constructs to their functional programming counterparts&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://orhanbalci.github.io/drafts/216/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://orhanbalci.github.io/drafts/216/</guid>
      <description>

&lt;p&gt;title: Arazi / Radyo Seyrüsefer Sunucu Yazılımı
link: &lt;a href=&#34;http://orhanbalci.net/tr/?p=216&#34;&gt;http://orhanbalci.net/tr/?p=216&lt;/a&gt;
author: admin
description:
post_id: 216
created: 2009/07/22 22:00:21
created_gmt: 2009/07/22 19:00:21
comment_status: open
post_name:
status: draft
post_type: post&lt;/p&gt;

&lt;h1 id=&#34;arazi-radyo-seyrüsefer-sunucu-yazılımı&#34;&gt;Arazi / Radyo Seyrüsefer Sunucu Yazılımı&lt;/h1&gt;

&lt;p&gt;Proje Tanımı:
HELSİM projesi kapsamında ihtiyaç duyulan arazi verisi sorgularını hesaplayan yazılımın geliştirilmesi.&lt;/p&gt;

&lt;p&gt;Proje Türü:
Ticari&lt;/p&gt;

&lt;p&gt;Teknolojiler:
C++, Qt, NTP&lt;/p&gt;

&lt;p&gt;Rol:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sunucu konfigürasyonu yönetim biriminin geliştirilmesi.&lt;/li&gt;
&lt;li&gt;Sunucu yazılım test biriminin geliştirilmesi.&lt;/li&gt;
&lt;li&gt;Sunucu zamanının Network Time Protokolü ile güncel tutulması.&lt;/li&gt;
&lt;li&gt;Sunucu donanım kontrol bileşeninin geliştirilmesi.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://orhanbalci.github.io/drafts/222/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://orhanbalci.github.io/drafts/222/</guid>
      <description>

&lt;p&gt;title: MES (Mühimmat Eğitim Simulatörü)
link: &lt;a href=&#34;http://orhanbalci.net/tr/?p=222&#34;&gt;http://orhanbalci.net/tr/?p=222&lt;/a&gt;
author: admin
description:
post_id: 222
created: 2009/07/28 13:49:56
created_gmt:
comment_status: open
post_name:
status: draft
post_type: post&lt;/p&gt;

&lt;h1 id=&#34;mes-mühimmat-eğitim-simulatörü&#34;&gt;MES (Mühimmat Eğitim Simulatörü)&lt;/h1&gt;

&lt;p&gt;Proje Tanımı:
Helikopterden yerdeki hareketli veya hareketsiz hedeflere atılan füze(mühimmat) dinamiğinin incelenmesi amacıyla silahçı ve pilot kullanıcılarına yönelik yazılımın geliştirilmesi.&lt;/p&gt;

&lt;p&gt;Proje Türü:
Ticari&lt;/p&gt;

&lt;p&gt;Teknolojiler:
C++, Qt, Presagis Vega, OPCODE çarpışma kontrol kütüphanesi&lt;/p&gt;

&lt;p&gt;Rol:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Senaryodaki hareketli ve hareketsiz cisimlerin AABB algoritmasını kullanan OPCODE ile çarpışma kontrollerinin yapılması&lt;/li&gt;
&lt;li&gt;Proje hata takibi için BugZilla altyapısının kurulması&lt;/li&gt;
&lt;li&gt;Proje genelindeki yazılım hatalarının giderilmesi.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://orhanbalci.github.io/drafts/249/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://orhanbalci.github.io/drafts/249/</guid>
      <description>

&lt;p&gt;title: Baytar (Veteriner Hekim Klinik Yönetim Sistemi)
link: &lt;a href=&#34;http://orhanbalci.net/tr/?p=249&#34;&gt;http://orhanbalci.net/tr/?p=249&lt;/a&gt;
author: admin
description:
post_id: 249
created: 2009/08/13 20:44:14
created_gmt: 2009/08/13 17:44:14
comment_status: open
post_name:
status: draft
post_type: post&lt;/p&gt;

&lt;h1 id=&#34;baytar-veteriner-hekim-klinik-yönetim-sistemi&#34;&gt;Baytar (Veteriner Hekim Klinik Yönetim Sistemi)&lt;/h1&gt;

&lt;p&gt;[caption id=&amp;ldquo;attachment_261&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;470&amp;rdquo; caption=&amp;ldquo;Baytar 0.1&amp;rdquo;]&lt;img src=&#34;http://orhanbalci.github.io/wp-content/uploads/baytar.png&#34; alt=&#34;Baytar 0.1&#34; /&gt;[/caption]&lt;/p&gt;

&lt;p&gt;Proje Tanımı:
Veteriner hekimlerin klinikteki müşterileri, hayvanları, hayvanlara uygulanan aşıları ve diğer tedavileri kaydetmeye yönelik yazılım.&lt;/p&gt;

&lt;p&gt;Proje Türü:
Kişisel Ticari&lt;/p&gt;

&lt;p&gt;Teknolojiler:
Java, MySQL, HSQLDB&lt;/p&gt;

&lt;p&gt;Rol:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yazılım mimarisi tasarımı ve gerçeklenmesi.&lt;/li&gt;
&lt;li&gt;Veritabanı tasarımı ve gerçeklenmesi.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://orhanbalci.github.io/drafts/327/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://orhanbalci.github.io/drafts/327/</guid>
      <description>

&lt;p&gt;title: NetBeans Yerelleştirme
link: &lt;a href=&#34;http://orhanbalci.net/tr/?p=327&#34;&gt;http://orhanbalci.net/tr/?p=327&lt;/a&gt;
author: admin
description:
post_id: 327
created: 2009/09/16 09:54:32
created_gmt:
comment_status: open
post_name:
status: draft
post_type: post&lt;/p&gt;

&lt;h1 id=&#34;netbeans-yerelleştirme&#34;&gt;NetBeans Yerelleştirme&lt;/h1&gt;

&lt;p&gt;Proje Tanımı:
NetBeans tümleşik geliştirme ortamının Türkçe&amp;rsquo;ye çevirilmesi.&lt;/p&gt;

&lt;p&gt;Proje Türü:
Açık Kaynak Kod&lt;/p&gt;

&lt;p&gt;Teknolojiler:
Community Translation Interface&lt;/p&gt;

&lt;p&gt;Rol:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yazılım yerelleştirilmesinde aktif rol almak.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://orhanbalci.github.io/drafts/netbeans-yerellestirmesi-icin-gonulluler-araniyor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://orhanbalci.github.io/drafts/netbeans-yerellestirmesi-icin-gonulluler-araniyor/</guid>
      <description>

&lt;p&gt;title: NetBeans Yerelleştirmesi İçin Gönüllüler Aranıyor
link: &lt;a href=&#34;http://orhanbalci.net/tr/?p=120&#34;&gt;http://orhanbalci.net/tr/?p=120&lt;/a&gt;
author: admin
description:
post_id: 120
created: 2009/05/06 11:10:47
created_gmt: 2009/05/06 09:10:47
comment_status: open
post_name: netbeans-yerellestirmesi-icin-gonulluler-araniyor
status: draft
post_type: post&lt;/p&gt;

&lt;h1 id=&#34;netbeans-yerelleştirmesi-için-gönüllüler-aranıyor&#34;&gt;NetBeans Yerelleştirmesi İçin Gönüllüler Aranıyor&lt;/h1&gt;

&lt;p&gt;NetBeans 6.7 versiyonunu İngilizce bilmeyenlerin de kullanabilmesi amacıyla Türkçeleştirmeye çalışıyoruz. Bu konuda çeviri ve test başta olmak üzere her türlü desteğe ihtiyacımız var. Çevirilere ben de el atmak istiyorum derseniz benimle &lt;strong&gt;orhanbalci@gmail.com&lt;/strong&gt; adresinden iletişime geçebilirsiniz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://orhanbalci.github.io/drafts/radyo-seyrusefer-cihazlari-veritabani-guncelleme-yazilimi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://orhanbalci.github.io/drafts/radyo-seyrusefer-cihazlari-veritabani-guncelleme-yazilimi/</guid>
      <description>

&lt;p&gt;title: Radyo Seyrüsefer Cihazları Veritabanı Güncelleme Yazılımı
link: &lt;a href=&#34;http://orhanbalci.net/tr/?p=206&#34;&gt;http://orhanbalci.net/tr/?p=206&lt;/a&gt;
author: admin
description:
post_id: 206
created: 2009/07/22 21:04:25
created_gmt: 2009/07/22 18:04:25
comment_status: open
post_name: radyo-seyrusefer-cihazlari-veritabani-guncelleme-yazilimi
status: draft
post_type: post&lt;/p&gt;

&lt;h1 id=&#34;radyo-seyrüsefer-cihazları-veritabanı-güncelleme-yazılımı&#34;&gt;Radyo Seyrüsefer Cihazları Veritabanı Güncelleme Yazılımı&lt;/h1&gt;

&lt;p&gt;Proje Tanımı :
HELSİM projesi kapsamında hava taşıtlarının gereksinim duyduğu seyrüsefer cihazlarınıın bilgilerinin güncellenmesi.&lt;/p&gt;

&lt;p&gt;Proje Türü:
Ticari&lt;/p&gt;

&lt;p&gt;Teknolojiler :
C++, Qt, PostgreSQL, PostGis, OGR, ARINC 424&lt;/p&gt;

&lt;p&gt;Rol :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Harita altlık yapısının PostGis ve Qt yardımı ile gerçeklenmesi&lt;/li&gt;
&lt;li&gt;ARINC 424 verisinin ayrıştırılması ve veritabanına aktarılması&lt;/li&gt;
&lt;li&gt;VOR, TACAN, DME, Airport, Runway, FIR/UIR, Restricted Airspace, Controlled Airspace verilerinin vektörel olarak haritaya çizilmesi&lt;/li&gt;
&lt;li&gt;Yukarıda sayılan verilerin ICAO kodu vs. anahtarlara göre sorgulanması&lt;/li&gt;
&lt;li&gt;Verilerin belirli aralıklarla yedeğinin alınması&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>